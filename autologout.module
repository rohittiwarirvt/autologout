<?php

/**
 * @file
 * Used to automagically log out a user after a certain time.
 */

/**
 * Implementation of hook_help().
 */
function autologout_help($path, $arg) {
  switch ($path) {
    case 'admin/help#autologout':
      $output = '<p>'. t('The <em>Automated Logout</em> module allows you to force users to log out after a given amount of time. You can configure this in the <a href="@usersettings">User settings administration</a>.', array('@usersettings' => base_path() .'admin/user/settings')) . '</p>';
      $output .= '<p>'. t('If you have the <a href="@jquerycountdown">jQuery Countdown module</a> enabled, the <a href="@automatedlogoutblock">Automated Logout block</a> will have a live countdown timer.', array('@automatedlogoutblock' => base_path() .'admin/build/block', '@usersettings' => 'http://drupal.org/project/jquery_countdown')) . '</p>';
      return $output;
    break;
  }
}

/**
 * Implementation of hook_form_alter().
 */
function autologout_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'user_admin_settings') {
    $form['autologout'] = array(
      '#type' => 'fieldset',
      '#title' => t('Automated Logout'),
      '#weight' => -1,
    );
    $form['autologout']['autologout_seconds'] = array(
      '#type' => 'select',
      '#title' => t('Time until forced logout'),
      '#description' => t('Force the user to logout after the given amount of time.'),
      '#default_value' => variable_get('autologout_seconds', 0),
      '#options' => array(
        0 => t('Disabled'),
        30 => t('30 seconds'),
        60 => t('One minute'),
        60 * 2 => t('Two minutes'),
        60 * 5 => t('Five minutes'),
        60 * 10 => t('Ten minutes'),
        60 * 20 => t('Twenty minutes'),
        60 * 30 => t('Thirty minutes'),
        60 * 60 => t('One hour'),
      ),
    );
  }
}

/**
 * Implementation of hook_init().
 */
function autologout_init() {
  global $user;
  if ($user->uid > 0) {
    // See if automatic logout is enabled.
    $seconds = variable_get('autologout_seconds', 0);
    if ($seconds > 0) {
      // Check the session's last access.
      if (!isset($_SESSION['autologout_lastaccess']) || ((int)$_SESSION['autologout_lastaccess']) > time() - $seconds) {
        // Update the session's last access.
        $_SESSION['autologout_lastaccess'] = time();
        $redirect = base_path() .'logout';
        drupal_set_html_head("<meta http-equiv='refresh' content='$seconds';url='$redirect'>");
      }
      else {
        // Force the user to log out.
        module_load_include('inc', 'user', 'user.pages');
        user_logout();
      }
    }
  }
}

/**
 * Implementation of hook_block().
 */
function autologout_block($op = 'list', $delta = 0, $edit = array()) {
  // The $op parameter determines what piece of information is being requested.
  switch ($op) {
    case 'list':
      $blocks['autologout'] = array(
        'info' => t('Automated Logout'),
      );
      return $blocks;
      break;
    case 'view':
      $block = array();
      switch ($delta) {
        case 'autologout':
          $block['subject'] = t('Automated Logout');
          $block['content'] = theme('autologout_block');
          break;
      }
      return $block;
  }
}

/**
 * Implementation of hook_theme().
 */
function autologout_theme() {
  return array(
    'autologout_block' => array(),
  );
}

/**
 * Themes the automated logout block.
 */
function theme_autologout_block() {
  global $user;
  $seconds = (int)variable_get('autologout_seconds', 0);
  if ($user->uid != 0 && $seconds > 0) {
    if (module_exists('jquery_countdown')) {
      jquery_countdown_add(".autologout", array("until" => $seconds, "expiryUrl" => base_path() .'logout'));
    }
    return '<div class="autologout">'. t('You will be logged out in !time.', array('!time' => format_interval($seconds))) . '</div>';
  }
}
